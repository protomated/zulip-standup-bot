version: '3.8'

services:
  # Standup Bot with PostgreSQL database (production setup)
  standup-bot:
    build: .
    container_name: zulip-standup-bot
    environment:
      # Zulip Configuration (required)
      - ZULIP_EMAIL=${ZULIP_EMAIL}
      - ZULIP_API_KEY=${ZULIP_API_KEY}
      - ZULIP_SITE=${ZULIP_SITE}
      
      # Database Configuration
      - DATABASE_URL=postgresql://standup_user:${POSTGRES_PASSWORD:-standup_secure_password}@db:5432/standup
      
      # AI Configuration (optional)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      
      # Bot Behavior Configuration
      - DEFAULT_TIMEZONE=${DEFAULT_TIMEZONE:-America/New_York}
      - DEFAULT_PROMPT_TIME=${DEFAULT_PROMPT_TIME:-09:30}
      - DEFAULT_REMINDER_TIME=${DEFAULT_REMINDER_TIME:-11:45}
      - DEFAULT_CUTOFF_TIME=${DEFAULT_CUTOFF_TIME:-12:45}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    
    depends_on:
      db:
        condition: service_healthy
    
    restart: unless-stopped
    
    volumes:
      # Mount data directory for SQLite fallback and logs
      - ./data:/app/data
      - ./logs:/app/logs
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5002/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: standup-postgres
    environment:
      - POSTGRES_DB=standup
      - POSTGRES_USER=standup_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-standup_secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    restart: unless-stopped
    
    # Security: Only accessible from bot
    networks:
      - standup-network
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U standup_user -d standup"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Redis (optional - for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: standup-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    
    volumes:
      - redis_data:/data
    
    restart: unless-stopped
    
    networks:
      - standup-network
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Nginx reverse proxy (optional - for HTTPS and load balancing)
  nginx:
    image: nginx:alpine
    container_name: standup-nginx
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    
    depends_on:
      - standup-bot
    
    restart: unless-stopped
    
    networks:
      - standup-network
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  standup-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
