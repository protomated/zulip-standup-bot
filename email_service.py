import logging
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from typing import Dict, Any, Optional, List
import markdown
import os


class EmailService:
    """
    Service for sending email reports
    """

    def __init__(self, config):
        """
        Initialize the email service with configuration

        Args:
            config: Configuration object containing email settings
        """
        self.config = config
        self.logger = logging.getLogger('standup_bot.email')

        # Get email configuration from environment variables or config
        self.smtp_server = os.environ.get('SMTP_SERVER', config.smtp_server)
        self.smtp_port = int(os.environ.get('SMTP_PORT', config.smtp_port))
        self.smtp_username = os.environ.get('SMTP_USERNAME', config.smtp_username)
        self.smtp_password = os.environ.get('SMTP_PASSWORD', config.smtp_password)
        self.from_email = os.environ.get('FROM_EMAIL', config.from_email)

        # Validate required configuration
        self._validate_config()

    def _validate_config(self) -> None:
        """Validate that required configuration is present"""
        required_fields = ['smtp_server', 'smtp_port', 'smtp_username', 'smtp_password', 'from_email']
        missing_fields = []

        for field in required_fields:
            if not getattr(self, field, None):
                missing_fields.append(field)

        if missing_fields:
            self.logger.warning(f"Email service missing configuration: {', '.join(missing_fields)}")

    def send_report(self, to_email: str, report_markdown: str, subject: str = None) -> bool:
        """
        Send a report via email

        Args:
            to_email: Recipient email address
            report_markdown: Report content in Markdown format
            subject: Email subject (optional)

        Returns:
            True if email was sent successfully, False otherwise
        """
        if not self._is_configured():
            self.logger.error("Email service not properly configured")
            return False

        try:
            # Create message
            msg = MIMEMultipart('alternative')
            msg['Subject'] = subject or "Standup Report"
            msg['From'] = self.from_email
            msg['To'] = to_email

            # Convert markdown to HTML
            html_content = self._markdown_to_html(report_markdown)

            # Attach plain text and HTML versions
            text_part = MIMEText(report_markdown, 'plain')
            html_part = MIMEText(html_content, 'html')
            msg.attach(text_part)
            msg.attach(html_part)

            # Send email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
                server.send_message(msg)

            self.logger.info(f"Sent report email to {to_email}")
            return True

        except Exception as e:
            self.logger.error(f"Failed to send email: {str(e)}")
            return False

    def _is_configured(self) -> bool:
        """Check if email service is properly configured"""
        return all([
            self.smtp_server,
            self.smtp_port,
            self.smtp_username,
            self.smtp_password,
            self.from_email
        ])

    def _markdown_to_html(self, markdown_text: str) -> str:
        """
        Convert markdown to HTML for email

        Args:
            markdown_text: Markdown formatted text

        Returns:
            HTML formatted text
        """
        # Convert markdown to HTML
        html = markdown.markdown(markdown_text)

        # Wrap in basic HTML structure with some styling
        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
                body {{ 
                    font-family: Arial, sans-serif; 
                    line-height: 1.6;
                    color: #333;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 20px;
                }}
                h1 {{ color: #2c5282; border-bottom: 1px solid #e2e8f0; padding-bottom: 10px; }}
                h2 {{ color: #3182ce; margin-top: 25px; }}
                h3 {{ color: #4299e1; }}
                hr {{ border: 0; height: 1px; background: #e2e8f0; margin: 20px 0; }}
                .participation {{ padding: 10px; border-radius: 5px; background-color: #f7fafc; }}
                .summary {{ background-color: #ebf8ff; padding: 15px; border-radius: 5px; margin: 15px 0; }}
                .footer {{ font-size: 0.8em; color: #718096; margin-top: 30px; border-top: 1px solid #e2e8f0; padding-top: 10px; }}
            </style>
        </head>
        <body>
            {html}
            <div class="footer">
                <p>This report was generated by StandupBot. Please do not reply to this email.</p>
            </div>
        </body>
        </html>
        """
